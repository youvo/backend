diff --git a/simple_oauth.services.yml b/simple_oauth.services.yml
index 0455a1a..0058616 100644
--- a/simple_oauth.services.yml
+++ b/simple_oauth.services.yml
@@ -17,6 +17,7 @@ services:
       - '@simple_oauth.server.resource_server'
       - '@entity_type.manager'
       - '@simple_oauth.page_cache_request_policy.disallow_oauth2_token_requests'
+      - '@logger.channel.simple_oauth'
     tags:
       - { name: authentication_provider, provider_id: oauth2, global: TRUE, priority: 35 }
   simple_oauth.page_cache_request_policy.disallow_oauth2_token_requests:
@@ -24,7 +25,14 @@ services:
     public: false
     tags:
       - { name: page_cache_request_policy }
-
+  logger.channel.simple_oauth:
+    parent: logger.channel_base
+    arguments: ['simple_oauth']
+  Drupal\simple_oauth\EventSubscriber\ExceptionLoggingSubscriber:
+    decorates: 'exception.logger'
+    arguments:
+      - '@Drupal\simple_oauth\EventSubscriber\ExceptionLoggingSubscriber.inner'
+      - '@logger.channel.simple_oauth'
   simple_oauth.normalizer.oauth2_token:
     class: Drupal\simple_oauth\Normalizer\TokenEntityNormalizer
     arguments: [ '@entity_type.manager' ]
diff --git a/src/Authentication/Provider/SimpleOauthAuthenticationProvider.php b/src/Authentication/Provider/SimpleOauthAuthenticationProvider.php
index cf93cb9..c8978ae 100644
--- a/src/Authentication/Provider/SimpleOauthAuthenticationProvider.php
+++ b/src/Authentication/Provider/SimpleOauthAuthenticationProvider.php
@@ -6,11 +6,11 @@ use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\simple_oauth\Authentication\TokenAuthUser;
+use Drupal\simple_oauth\Exception\OAuthUnauthorizedHttpException;
 use Drupal\simple_oauth\PageCache\SimpleOauthRequestPolicyInterface;
 use Drupal\simple_oauth\Server\ResourceServerInterface;
 use League\OAuth2\Server\Exception\OAuthServerException;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Exception\HttpException;

 /**
  * @internal
@@ -78,12 +78,10 @@ class SimpleOauthAuthenticationProvider implements AuthenticationProviderInterfa
       $auth_request = $this->resourceServer->validateAuthenticatedRequest($request);
     }
     catch (OAuthServerException $exception) {
-      // Procedural code here is hard to avoid.
-      watchdog_exception('simple_oauth', $exception);
-
-      throw new HttpException(
-        $exception->getHttpStatusCode(),
-        $exception->getHint(),
+      // Forward authentication challenge to be interpreted by the requester.
+      throw new OAuthUnauthorizedHttpException(
+        $this->getUnauthorizedExceptionChallenge($request, $exception),
+        $exception->getMessage(),
         $exception
       );
     }
@@ -106,10 +104,9 @@ class SimpleOauthAuthenticationProvider implements AuthenticationProviderInterfa
           ['%name' => $account->getAccountName()]
         )
       );
-      watchdog_exception('simple_oauth', $exception);
-      throw new HttpException(
-        $exception->getHttpStatusCode(),
-        $exception->getHint(),
+      throw new OAuthUnauthorizedHttpException(
+        $this->getUnauthorizedExceptionChallenge($request, $exception),
+        $exception->getMessage(),
         $exception
       );
     }
@@ -124,4 +121,25 @@ class SimpleOauthAuthenticationProvider implements AuthenticationProviderInterfa
     return $account;
   }

+
+  /**
+   * Formats challenge for unauthorized exception.
+   *
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   Request.
+   * @param \League\OAuth2\Server\Exception\OAuthServerException $exception
+   *   Exception.
+   *
+   * @return string
+   *   Formatted challenge for result.
+   */
+  protected function getUnauthorizedExceptionChallenge(Request $request, OAuthServerException $exception) {
+    return sprintf(
+      '%s realm="OAuth", error="%s", error_description="%s"',
+      strpos($request->headers->get('Authorization'), 'Bearer') === 0 ? 'Bearer' : 'Basic',
+      $exception->getErrorType(),
+      $exception->getHint()
+    );
+  }
+
 }
diff --git a/src/Controller/Oauth2AuthorizeController.php b/src/Controller/Oauth2AuthorizeController.php
index 13dde1d..0bbb6e3 100644
--- a/src/Controller/Oauth2AuthorizeController.php
+++ b/src/Controller/Oauth2AuthorizeController.php
@@ -17,13 +17,14 @@ use League\OAuth2\Server\Entities\ScopeEntityInterface;
 use League\OAuth2\Server\Exception\OAuthServerException;
 use League\OAuth2\Server\Repositories\ClientRepositoryInterface;
 use League\OAuth2\Server\RequestTypes\AuthorizationRequest;
+use Psr\Log\LoggerInterface;
 use Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;

 /**
- * Oauth2AuthorizeController.
+ * Controller for authorization code grant.
  */
 class Oauth2AuthorizeController extends ControllerBase {

@@ -55,13 +56,20 @@ class Oauth2AuthorizeController extends ControllerBase {
    */
   protected $knownClientRepository;

+  /**
+   * The logger channel.
+   *
+   * @var \Psr\Log\LoggerInterface
+   */
+  protected $logger;
+
   /**
    * @var \League\OAuth2\Server\Repositories\ClientRepositoryInterface
    */
   protected $clientRepository;

   /**
-   * Oauth2AuthorizeController construct.
+   * Oauth2AuthorizeController constructor.
    *
    * @param \Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface $message_factory
    *   The PSR-7 converter.
@@ -73,19 +81,23 @@ class Oauth2AuthorizeController extends ControllerBase {
    *   The known client repository service.
    * @param \League\OAuth2\Server\Repositories\ClientRepositoryInterface $client_repository
    *   The client repository service.
+   * @param \Psr\Log\LoggerInterface $logger
+   *   Logger channel.
    */
   public function __construct(
     HttpMessageFactoryInterface $message_factory,
     Oauth2GrantManagerInterface $grant_manager,
     ConfigFactoryInterface $config_factory,
     KnownClientsRepositoryInterface $known_clients_repository,
-    ClientRepositoryInterface $client_repository
+    ClientRepositoryInterface $client_repository,
+    LoggerInterface $logger
   ) {
     $this->messageFactory = $message_factory;
     $this->grantManager = $grant_manager;
     $this->configFactory = $config_factory;
     $this->knownClientRepository = $known_clients_repository;
     $this->clientRepository = $client_repository;
+    $this->logger = $logger;
   }

   /**
@@ -97,7 +109,8 @@ class Oauth2AuthorizeController extends ControllerBase {
       $container->get('plugin.manager.oauth2_grant.processor'),
       $container->get('config.factory'),
       $container->get('simple_oauth.known_clients'),
-      $container->get('simple_oauth.repositories.client')
+      $container->get('simple_oauth.repositories.client'),
+      $container->get('logger.channel.simple_oauth')
     );
   }

@@ -166,8 +179,9 @@ class Oauth2AuthorizeController extends ControllerBase {
       }
       catch (OAuthServerException $exception) {
         $this->messenger()->addError($this->t('Fatal error. Unable to get the authorization server.'));
-        watchdog_exception('simple_oauth', $exception);
-        return new RedirectResponse(Url::fromRoute('<front>')->toString());
+        $this->logger->error($exception->getMessage() .
+          ' Hint: ' . $exception->getHint() . '.');
+        return RedirectResponse::create(Url::fromRoute('<front>')->toString());
       }
       if ($auth_request) {
         $can_grant_codes = $this->currentUser()
diff --git a/src/Controller/Oauth2Token.php b/src/Controller/Oauth2Token.php
index 286d073..93822b5 100644
--- a/src/Controller/Oauth2Token.php
+++ b/src/Controller/Oauth2Token.php
@@ -9,6 +9,8 @@ use League\OAuth2\Server\AuthorizationServer;
 use League\OAuth2\Server\Exception\OAuthServerException;
 use League\OAuth2\Server\Repositories\ClientRepositoryInterface;
 use Psr\Http\Message\ServerRequestInterface;
+use Psr\Log\LoggerInterface;
+use Psr\Log\LogLevel;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 class Oauth2Token extends ControllerBase {
@@ -23,6 +25,11 @@ class Oauth2Token extends ControllerBase {
    */
   protected $clientRepository;

+  /**
+   * Logger channel.
+   */
+  protected LoggerInterface $logger;
+
   /**
    * Oauth2Token constructor.
    *
@@ -31,9 +38,14 @@ class Oauth2Token extends ControllerBase {
    * @param \League\OAuth2\Server\Repositories\ClientRepositoryInterface $client_repository
    *   The client repository service.
    */
-  public function __construct(Oauth2GrantManagerInterface $grant_manager, ClientRepositoryInterface $client_repository) {
+  public function __construct(
+    Oauth2GrantManagerInterface $grant_manager,
+    ClientRepositoryInterface $client_repository,
+    LoggerInterface $logger
+  ) {
     $this->grantManager = $grant_manager;
     $this->clientRepository = $client_repository;
+    $this->logger = $logger;
   }

   /**
@@ -42,7 +54,8 @@ class Oauth2Token extends ControllerBase {
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('plugin.manager.oauth2_grant.processor'),
-      $container->get('simple_oauth.repositories.client')
+      $container->get('simple_oauth.repositories.client'),
+      $container->get('logger.channel.simple_oauth')
     );
   }

@@ -69,7 +82,10 @@ class Oauth2Token extends ControllerBase {
       $response = $this->handleToken($request, $auth_server);
     }
     catch (OAuthServerException $exception) {
-      watchdog_exception('simple_oauth', $exception);
+      $this->logger->log(
+          $exception->getCode() < 500 ? LogLevel::NOTICE : LogLevel::ERROR,
+          $exception->getMessage() . ' Hint: ' . $exception->getHint() . '.'
+      );
       $response = $exception->generateHttpResponse(new Response());
     }
     return $response;
diff --git a/src/Entity/Form/Oauth2GenerateKeyForm.php b/src/Entity/Form/Oauth2GenerateKeyForm.php
index a51b22a..b55deea 100755
--- a/src/Entity/Form/Oauth2GenerateKeyForm.php
+++ b/src/Entity/Form/Oauth2GenerateKeyForm.php
@@ -8,7 +8,9 @@ use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Utility\Error;
 use Drupal\simple_oauth\Service\KeyGeneratorService;
+use Psr\Log\LoggerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ -21,13 +23,20 @@ class Oauth2GenerateKeyForm extends FormBase {
    */
   private $keyGen;

+  /**
+   * @var \Psr\Log\LoggerInterface
+   */
+  protected $logger;
+
   /**
    * Oauth2GenerateKeyForm constructor.
    *
    * @param \Drupal\simple_oauth\Service\KeyGeneratorService $key_generator_service
+   * @param \Psr\Log\LoggerInterface $logger
    */
-  public function __construct(KeyGeneratorService $key_generator_service) {
+  public function __construct(KeyGeneratorService $key_generator_service, LoggerInterface $logger) {
     $this->keyGen = $key_generator_service;
+    $this->logger = $logger;
   }

   /**
@@ -35,7 +44,8 @@ class Oauth2GenerateKeyForm extends FormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get('simple_oauth.key.generator')
+      $container->get('simple_oauth.key.generator'),
+      $container->get('logger.channel.simple_oauth')
     );
   }

@@ -126,7 +136,8 @@ class Oauth2GenerateKeyForm extends FormBase {
     }
     catch (\Exception $exception) {
       // If exception log it and return an error message.
-      watchdog_exception('simple_oauth', $exception);
+      $variables = Error::decodeException($exception);
+      $this->logger->error('%type: @message in %function (line %line of %file).', $variables);
       $response->addCommand(new InvokeCommand('#key-error-message', 'show'));
       return $response->addCommand(new HtmlCommand('#key-error-message', $exception->getMessage()));
     }
diff --git a/src/EventSubscriber/ExceptionLoggingSubscriber.php b/src/EventSubscriber/ExceptionLoggingSubscriber.php
new file mode 100644
index 0000000..cf351d3
--- /dev/null
+++ b/src/EventSubscriber/ExceptionLoggingSubscriber.php
@@ -0,0 +1,65 @@
+<?php
+
+namespace Drupal\simple_oauth\EventSubscriber;
+
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\Core\EventSubscriber\ExceptionLoggingSubscriber as CoreExceptionLoggingSubscriber;
+use Drupal\simple_oauth\Exception\OAuthUnauthorizedHttpException;
+use Psr\Log\LoggerInterface;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+
+/**
+ * Decorated logging subscriber to reduce log spam on normal OAuth2 responses.
+ */
+class ExceptionLoggingSubscriber implements EventSubscriberInterface {
+
+  /**
+   * Wrapped service.
+   */
+  protected EventSubscriberInterface $inner;
+
+  /**
+   * Logger channel.
+   */
+  protected LoggerInterface $logger;
+
+  /**
+   * Constructor.
+   *
+   * @param \Symfony\Component\EventDispatcher\EventSubscriberInterface $inner
+   *   Wrapped subscriber service.
+   * @param \Psr\Log\LoggerInterface $logger
+   *   Logger channel.
+   */
+  public function __construct(
+    EventSubscriberInterface $inner,
+    LoggerInterface $logger
+  ) {
+    $this->inner = $inner;
+    $this->logger = $logger;
+  }
+
+  /**
+   * Log exceptions.
+   *
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
+   *   The event to process.
+   */
+  public function onException(ExceptionEvent $event): void {
+    if ($event->getThrowable() instanceof OAuthUnauthorizedHttpException) {
+      $throwable = $event->getThrowable();
+      $this->logger->notice($throwable->getMessage() .
+        ' Hint: ' . $throwable->getPrevious()->getHint() . '.');
+      return;
+    }
+    $this->inner->onException($event);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public static function getSubscribedEvents() {
+    return CoreExceptionLoggingSubscriber::getSubscribedEvents();
+  }
+
+}
diff --git a/src/Exception/OAuthUnauthorizedHttpException.php b/src/Exception/OAuthUnauthorizedHttpException.php
new file mode 100644
index 0000000..75baa81
--- /dev/null
+++ b/src/Exception/OAuthUnauthorizedHttpException.php
@@ -0,0 +1,7 @@
+<?php
+
+namespace Drupal\simple_oauth\Exception;
+
+use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
+
+final class OAuthUnauthorizedHttpException extends UnauthorizedHttpException {}
diff --git a/tests/src/Unit/Authentication/Provider/SimpleOauthAuthenticationTest.php b/tests/src/Unit/Authentication/Provider/SimpleOauthAuthenticationTest.php
index 482b43e..1801887 100644
--- a/tests/src/Unit/Authentication/Provider/SimpleOauthAuthenticationTest.php
+++ b/tests/src/Unit/Authentication/Provider/SimpleOauthAuthenticationTest.php
@@ -11,6 +11,7 @@ use Drupal\simple_oauth\PageCache\DisallowSimpleOauthRequests;
 use Drupal\simple_oauth\PageCache\SimpleOauthRequestPolicyInterface;
 use Drupal\simple_oauth\Server\ResourceServerInterface;
 use Drupal\Tests\UnitTestCase;
+use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ -42,11 +43,13 @@ class SimpleOauthAuthenticationTest extends UnitTestCase {

     $resource_server = $this->prophesize(ResourceServerInterface::class);
     $entity_type_manager = $this->prophesize(EntityTypeManagerInterface::class);
+    $logger = $this->prophesize(LoggerInterface::class);
     $this->oauthPageCacheRequestPolicy = new DisallowSimpleOauthRequests();
     $this->provider = new SimpleOauthAuthenticationProvider(
       $resource_server->reveal(),
       $entity_type_manager->reveal(),
-      $this->oauthPageCacheRequestPolicy
+      $this->oauthPageCacheRequestPolicy,
+      $logger->reveal(),
     );
   }
