diff --git a/modules/contrib/jsonapi_extras/src/Entity/JsonapiResourceConfig.php b/modules/contrib/jsonapi_extras/src/Entity/JsonapiResourceConfig.php
index 79fc57f2d190277f20e16dd14344d935a3b4721f..9d28939f307c7567bbba6088ac36db0bcd5dfa7d 100644
--- a/modules/contrib/jsonapi_extras/src/Entity/JsonapiResourceConfig.php
+++ b/modules/contrib/jsonapi_extras/src/Entity/JsonapiResourceConfig.php
@@ -4,6 +4,8 @@ namespace Drupal\jsonapi_extras\Entity;

 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\jsonapi\Routing\Routes;
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository;
 use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;

 /**
@@ -108,8 +110,8 @@ class JsonapiResourceConfig extends ConfigEntityBase {
    */
   protected static function rebuildRoutes() {
     try {
-      \Drupal::service('jsonapi.resource_type.repository')->reset();
-      \Drupal::service('router.builder')->setRebuildNeeded();
+      ConfigurableResourceTypeRepository::reset();
+      Routes::rebuild();
     }
     catch (ServiceNotFoundException $exception) {
       // This is intentionally empty.
diff --git a/modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php b/modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php
index 94c7e26036b7fd04ce1b5d16ae58d189f869c03c..3e752201b01a80b9159b09201d951335fd37eddc 100644
--- a/modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php
+++ b/modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php
@@ -16,7 +16,7 @@ use Drupal\Core\Entity\EntityTypeRepositoryInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\jsonapi\ResourceType\ResourceType;
-use Drupal\jsonapi\ResourceType\ResourceTypeRepository;
+use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
 use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;
 use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -88,7 +88,7 @@ class JsonapiResourceConfigForm extends EntityForm {
    *
    * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
    *   Bundle information service.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
    * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
    *   The entity field manager.
@@ -103,7 +103,7 @@ class JsonapiResourceConfigForm extends EntityForm {
    * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager.
    */
-  public function __construct(EntityTypeBundleInfoInterface $bundle_info, ResourceTypeRepository $resource_type_repository, EntityFieldManager $field_manager, EntityTypeRepositoryInterface $entity_type_repository, ResourceFieldEnhancerManager $enhancer_manager, ImmutableConfig $config, Request $request, TypedConfigManagerInterface $typed_config_manager) {
+  public function __construct(EntityTypeBundleInfoInterface $bundle_info, ResourceTypeRepositoryInterface $resource_type_repository, EntityFieldManager $field_manager, EntityTypeRepositoryInterface $entity_type_repository, ResourceFieldEnhancerManager $enhancer_manager, ImmutableConfig $config, Request $request, TypedConfigManagerInterface $typed_config_manager) {
     $this->bundleInfo = $bundle_info;
     $this->resourceTypeRepository = $resource_type_repository;
     $this->fieldManager = $field_manager;
diff --git a/modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php b/modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php
index a249ff05cdd38f42fbaea8fdc8910848bff5458f..e2282ec5c9e77c49c8c9e4b71e0140d22ec0f7df 100644
--- a/modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php
+++ b/modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php
@@ -8,7 +8,9 @@ use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Url;
-use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository;
+use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
+use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType;
 use Drupal\jsonapi_extras\ResourceType\NullJsonapiResourceConfig;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ -45,14 +47,14 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
    *   The entity type.
    * @param \Drupal\Core\Entity\EntityStorageInterface $storage
    *   The storage.
-   * @param \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository $resource_type_repository
-   *   The JSON:API configurable resource type repository.
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
+   *   The JSON:API resource type repository.
    * @param \Drupal\Core\Config\ImmutableConfig $config
    *   The config instance.
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entityTypeManager
    *   Entity type manager.
    */
-  public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigurableResourceTypeRepository $resource_type_repository, ImmutableConfig $config, EntityTypeManagerInterface $entityTypeManager = NULL) {
+  public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ResourceTypeRepositoryInterface $resource_type_repository, ImmutableConfig $config, EntityTypeManagerInterface $entityTypeManager = NULL) {
     parent::__construct($entity_type, $storage);
     $this->resourceTypeRepository = $resource_type_repository;
     $this->config = $config;
@@ -155,15 +157,17 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
     $resource_types = $this->resourceTypeRepository->all();
     $default_disabled = $this->config->get('default_disabled');
     foreach ($resource_types as $resource_type) {
-      /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config */
-      $resource_config = $resource_type->getJsonapiResourceConfig();
+      // Other modules may create resource types, e.g. jsonapi_cross_bundles.
+      $resource_config = $resource_type instanceof ConfigurableResourceType
+        ? $resource_type->getJsonapiResourceConfig()
+        : NULL;

       /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
       $entity_type_id = $resource_type->getEntityTypeId();
       $bundle = $resource_type->getBundle();

       $default_group = 'enabled';
-      if ($resource_type->isInternal() && !$resource_config->get('disabled')) {
+      if ($resource_config && $resource_type->isInternal() && !$resource_config->get('disabled')) {
         // Either this item is marked internal by the entity-type OR the default
         // disabled setting is active.
         if (!$default_disabled) {
@@ -181,14 +185,19 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
         }
         $default_group = 'disabled';
       }
+      else if (!$resource_config && $resource_type->isInternal()) {
+        continue;
+      }

-      $group = $resource_config->get('disabled') ? 'disabled' : $default_group;
+      $group = ($resource_config && $resource_config->get('disabled')) || (!$resource_config && !$resource_type->isLocatable())
+        ? 'disabled'
+        : $default_group;
       $row = [
         'name' => ['#plain_text' => $resource_type->getTypeName()],
         'path' => [
           '#type' => 'html_tag',
           '#tag' => 'code',
-          '#value' => sprintf('/%s%s', $prefix, $resource_type->getPath()),
+          '#value' => sprintf('/%s/%s', $prefix, ltrim($resource_type->getPath(), '/')),
         ],
         'state' => [
           '#type' => 'html_tag',
@@ -200,7 +209,7 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
             ],
           ],
         ],
-        'operations' => [
+        'operations' => $resource_config ? [
           '#type' => 'operations',
           '#links' => [
             'overwrite' => [
@@ -212,10 +221,10 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
               ]),
             ],
           ],
-        ],
+        ]: [],
       ];

-      if (!$resource_config instanceof NullJsonapiResourceConfig) {
+      if ($resource_config && !($resource_config instanceof NullJsonapiResourceConfig)) {
         $row['state']['#value'] = $this->t('Overwritten');
         $row['state']['#attributes']['class'][] = 'label--overwritten';
         $row['operations']['#links'] = $this->getDefaultOperations($resource_config);
diff --git a/modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNormalizer.php b/modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNormalizer.php
index 7c78dcfc5d3caf7109fac30183e0fbd59ae1751e..f5a8ebf3e8486d49a859c30fefbedb7635b62274 100644
--- a/modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNormalizer.php
+++ b/modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNormalizer.php
@@ -4,9 +4,9 @@ namespace Drupal\jsonapi_extras\Normalizer;

 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
 use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType;
 use Drupal\schemata_json_schema\Normalizer\jsonapi\FieldDefinitionNormalizer as SchemataJsonSchemaFieldDefinitionNormalizer;
-use Drupal\jsonapi\ResourceType\ResourceTypeRepository;

 /**
  * Applies field enhancer schema changes to field schema.
@@ -23,10 +23,10 @@ class SchemaFieldDefinitionNormalizer extends SchemataJsonSchemaFieldDefinitionN
   /**
    * Constructs a SchemaFieldDefinitionNormalizer object.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
    *   A resource type repository.
    */
-  public function __construct(ResourceTypeRepository $resource_type_repository) {
+  public function __construct(ResourceTypeRepositoryInterface $resource_type_repository) {
     $this->resourceTypeRepository = $resource_type_repository;
   }

diff --git a/modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.php b/modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.php
index 1dc1a96f482593519a648ea142ba2627c1569e68..7ddc02529266157865c0577f3cd1a8ecb596e7d0 100644
--- a/modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.php
+++ b/modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.php
@@ -3,8 +3,8 @@
 namespace Drupal\jsonapi_extras\Normalizer;

 use Drupal\Component\Utility\NestedArray;
+use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
 use Drupal\schemata_json_schema\Normalizer\jsonapi\SchemataSchemaNormalizer as SchemataJsonSchemaSchemataSchemaNormalizer;
-use Drupal\jsonapi\ResourceType\ResourceTypeRepository;

 /**
  * Applies JSONAPI Extras attribute overrides to entity schemas.
@@ -21,10 +21,10 @@ class SchemataSchemaNormalizer extends SchemataJsonSchemaSchemataSchemaNormalize
   /**
    * Constructs a SchemataSchemaNormalizer object.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
    *   A resource repository.
    */
-  public function __construct(ResourceTypeRepository $resource_type_repository) {
+  public function __construct(ResourceTypeRepositoryInterface $resource_type_repository) {
     $this->resourceTypeRepository = $resource_type_repository;
   }

diff --git a/modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php b/modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php
index c995bbb373c9b97f1e1d041c466f1358db078a59..af5846acc003d61e3a9780d3c7645ba1cb806e45 100644
--- a/modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php
+++ b/modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php
@@ -55,7 +55,7 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
    *
    * @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig[]
    */
-  protected $resourceConfigs;
+  protected static $resourceConfigs;

   /**
    * Builds the resource config ID from the entity type ID and bundle.
@@ -193,7 +193,7 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
    * @throws \Drupal\Component\Plugin\Exception\PluginException
    */
   public function getResourceConfigs() {
-    if (!$this->resourceConfigs) {
+    if (!static::$resourceConfigs) {
       $resource_config_ids = [];
       foreach ($this->getEntityTypeBundleTuples() as $tuple) {
         list($entity_type_id, $bundle) = $tuple;
@@ -202,11 +202,11 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
           $bundle
         );
       }
-      $this->resourceConfigs = $this->entityTypeManager
+      static::$resourceConfigs = $this->entityTypeManager
         ->getStorage('jsonapi_resource_config')
         ->loadMultiple($resource_config_ids);
     }
-    return $this->resourceConfigs;
+    return static::$resourceConfigs;
   }

   /**
@@ -232,9 +232,8 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * Resets the internal caches for resource types and resource configs.
    */
-  public function reset() {
-    $this->all = [];
-    $this->resourceConfigs = [];
+  public static function reset() {
+    static::$resourceConfigs = [];
   }

   /**
