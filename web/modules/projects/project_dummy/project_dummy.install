<?php

/**
 * @file
 * Install, update and uninstall functions for the project_dummy module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Component\Utility\Random;
use Drupal\file\Entity\File;
use Drupal\project\Entity\Project;
use Drupal\Core\Utility\Error;

/**
 * Implements hook_install().
 */
function project_dummy_install() {
  module_set_weight('project_dummy', 2);
}

/**
 * Implements hook_site_install_finished().
 *
 * @see https://www.drupal.org/project/drupal/issues/2924549
 */
function project_dummy_site_install_finished() {

  // Initialize user IDs.
  $creative_ids = \Drupal::entityQuery('user')
    ->condition('roles', 'creative')
    ->condition('uid', [1, 2], 'NOT IN')
    ->execute();
  $organization_ids = \Drupal::entityQuery('user')
    ->condition('type', 'organization')
    ->execute();

  // Object for random content.
  $random = new Random();

  // Array of cycle states.
  $lifecycle_states = [
    'draft',
    'pending',
    'open',
    'ongoing',
    'completed',
  ];

  // Some time to use.
  $current_time = \Drupal::time()->getRequestTime();
  $one_year_ago = $current_time - 31536000;

  // Total projects.
  $total = 100;
  $max_created_increment = 31536000 / $total;
  $created = $one_year_ago;

  // Create random content.
  for ($i = 1; $i <= $total; $i++) {

    // Get field values.
    $skills = youvo_dummy_get_random_skills();
    $causes = youvo_dummy_get_random_causes();
    $image_file = project_dummy_get_stock_image($i);

    // Set random time in last year.
    $rnd_time = rand($one_year_ago, $current_time);
    $date = \Drupal::service('date.formatter')
      ->format($rnd_time, 'custom', 'Y-m-d');

    // Increase created time randomly.
    $created += rand(1, $max_created_increment);

    // Get random state.
    shuffle($lifecycle_states);
    $state = $lifecycle_states[0];

    // Create node with random information.
    $project = Project::create([
      'type' => 'project',
      'title' => ucwords($random->word(10) . ' ' . $random->word(6)),
      'body' => [
        'value' => rtrim($random->paragraphs(3)),
        'summary' => rtrim($random->paragraphs(1)),
      ],
      'langcode' => 'en',
      'created' => $created,
      'uid' => youvo_dummy_get_random_organization($organization_ids),
      'status' => 1,
      'field_workload' => rand(1, 5),
      'field_deadline' => $date,
      'field_city' => ucwords($random->word(12)),
      'field_material' => $random->sentences(4),
      'field_appreciation' => $random->sentences(8),
      'field_skills' => $skills,
      'field_causes' => $causes,
      'field_image' => [
        'target_id' => $image_file->id(),
        'alt' => $random->sentences(3, TRUE),
      ],
      'field_lifecycle' => $state,
      'field_local' => rand(0, 1),
    ]);

    // Set applicants for open projects.
    if ($state === 'open') {
      shuffle($creative_ids);
      $applicants = array_slice($creative_ids, 0, rand(0, count($creative_ids)));
      if (!empty($applicants)) {
        $project->setApplicants($applicants);
      }
    }

    // Set applicants and participants for ongoing or completed projects.
    if ($state === 'ongoing' || $state === 'completed') {
      shuffle($creative_ids);
      $applicants = array_slice($creative_ids, 0, rand(1, count($creative_ids)));
      $project->setApplicants($applicants);
      $participants = array_slice($applicants, 0, rand(1, count($applicants)));
      $project->setParticipants($participants);
    }

    try {
      $project->save();
    }
    catch (EntityStorageException $e) {
      $variables = Error::decodeException($e);
      \Drupal::logger('project_dummy')
        ->error('An error occurred while creating dummy projects. %type: @message in %function (line %line of %file).', $variables);
    }
  }
}

/**
 * Returns stock image file.
 *
 * @param int $i
 *   Iteration index.
 *
 * @return \Drupal\file\Entity\File
 *   Image file.
 */
function project_dummy_get_stock_image(int $i) {

  $index = sprintf('%02d', (($i - 1) % 12) + 1);
  $image_path = \Drupal::service('extension.list.module')->getPath('project_dummy') . '/img/' . $index . '.jpg';
  $public_path = \Drupal::service('file_system')->copy($image_path, 'public://' . $index . '.jpg');
  $image_file = File::create([
    'uri' => $public_path,
    'uid' => 1,
    'status' => 1,
  ]);
  try {
    $image_file->save();
  }
  catch (EntityStorageException $e) {
    $variables = Error::decodeException($e);
    \Drupal::logger('project_dummy')
      ->error('An error occurred while creating stock project images. %type: @message in %function (line %line of %file).', $variables);
  }

  return $image_file;
}
