<?php

/**
 * @file
 * Install, update and uninstall functions for the projects_dummy module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\file\Entity\File;
use Drupal\projects\Entity\Project;
use Drupal\Core\Utility\Error;
use Drupal\user\Entity\User;
use Faker\Factory;

/**
 * Implements hook_install().
 */
function projects_dummy_install() {
  module_set_weight('projects_dummy', 3);
}

/**
 * Implements hook_site_install_finished().
 *
 * @see https://www.drupal.org/project/drupal/issues/2924549
 */
function projects_dummy_site_install_finished() {

  // Initialize user IDs.
  $creative_ids = \Drupal::entityQuery('user')
    ->condition('roles', 'creative')
    ->condition('uid', 1, '!=')
    ->execute();
  $organization_ids = \Drupal::entityQuery('user')
    ->condition('type', 'organization')
    ->execute();

  // Object for random content.
  $faker = Factory::create('de_DE');
  $faker->seed(96886);

  // Array of cycle states.
  $lifecycle_states = [
    'draft',
    'pending',
    'open',
    'ongoing',
    'completed',
  ];

  // Some time to use.
  $current_time = \Drupal::time()->getRequestTime();
  $one_year_ago = $current_time - 31536000;

  // Total projects.
  $total = 100;
  $max_created_increment = 31536000 / $total;
  $created = $one_year_ago;

  // Organization contacts and manager storage.
  $contacts = [];
  $managers = [];

  // Create random content.
  for ($i = 1; $i <= $total; $i++) {

    // Get field values.
    $skills = youvo_dummy_get_random_skills();
    $image_file = projects_dummy_get_stock_image($i);

    // Set random time in last year.
    $rnd_time = rand($created, $created + 1209600);
    $deadline = \Drupal::service('date.formatter')
      ->format($rnd_time, 'custom', 'Y-m-d');

    // Increase created time randomly.
    $created += rand(min(86400, $max_created_increment), $max_created_increment);

    // Get random state.
    shuffle($lifecycle_states);
    $state = $lifecycle_states[0];

    // Get organization with contact and manager.
    $oid = youvo_dummy_get_random_organization($organization_ids);
    if (!isset($contacts[$oid])) {
      $organization = User::load($oid);
      $contact = $organization->get('field_contact')->value;
      $contacts[$oid] = $contact;
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $manager_field */
      $manager_field = $organization->get('field_manager');
      $manager_user = $manager_field->referencedEntities();
      $manager_user = !empty($manager_user) ? array_shift($manager_user) : NULL;
      $manager = $manager_user instanceof User ? $manager_user->id() : 0;
      $managers[$oid] = $manager;
    }
    else {
      $contact = $contacts[$oid];
      $manager = $managers[$oid];
    }

    // Create node with random information.
    $project = Project::create([
      'type' => 'project',
      'title' => ucwords($faker->words(4, TRUE)),
      'body' => [
        'value' => rtrim($faker->text(600)),
        'summary' => rtrim($faker->text(300)),
      ],
      'langcode' => 'de',
      'created' => $created,
      'uid' => $oid,
      'status' => 1,
      'field_allowance' => $faker->boolean(),
      'field_contact' => $contact,
      'field_workload' => rand(1, 5),
      'field_deadline' => $deadline,
      'field_city' => $faker->city(),
      'field_material' => $faker->text(100),
      'field_appreciation' => $faker->text(100),
      'field_skills' => $skills,
      'field_image' => [
        'target_id' => $image_file->id(),
        'alt' => $faker->text(50),
      ],
      'field_image_copyright' => $faker->optional()->name(),
      'field_lifecycle' => $state,
      'field_local' => $faker->boolean(),
    ]);

    // Set applicants for open projects.
    if ($state === 'open') {
      shuffle($creative_ids);
      $applicants = array_slice($creative_ids, 0, rand(0, count($creative_ids)));
      $applicants = array_diff($applicants, [$manager]);
      if (!empty($applicants)) {
        $project->setApplicants($applicants);
      }
      if ($manager) {
        $project->appendParticipant($manager, 'Manager');
      }
    }

    // Set applicants and participants for ongoing or completed projects.
    if ($state === 'ongoing' || $state === 'completed') {
      shuffle($creative_ids);
      $applicants = array_slice($creative_ids, 0, rand(1, min(5, count($creative_ids))));
      $applicants = array_diff($applicants, [$manager]);
      $project->setApplicants($applicants);
      $participants = array_slice($applicants, 0, rand(1, count($applicants)));
      $tasks = array_fill(0, count($participants), 'Creative');
      $project->setParticipants($participants, $tasks);
      if ($manager) {
        $project->appendParticipant($manager, 'Manager');
      }
    }

    // Set result text.
    if ($state === 'completed') {
      $project->get('field_result_text')->value = $faker->text(300);
      $project->get('field_result_files')->appendItem([
        'target_id' => $image_file->id(),
        'alt' => $faker->text(20),
      ]);
    }

    try {
      $project->save();
    }
    catch (EntityStorageException $e) {
      $variables = Error::decodeException($e);
      \Drupal::logger('youvo')
        ->error('An error occurred while creating dummy projects. %type: @message in %function (line %line of %file).', $variables);
    }
  }
}

/**
 * Returns stock image file.
 *
 * @param int $i
 *   Iteration index.
 *
 * @return \Drupal\file\Entity\File
 *   Image file.
 */
function projects_dummy_get_stock_image(int $i) {

  $index = sprintf('%02d', (($i - 1) % 12) + 1);
  $image_path = \Drupal::service('extension.list.module')->getPath('projects_dummy') . '/img/' . $index . '.jpg';
  $public_path = \Drupal::service('file_system')->copy($image_path, 'public://' . $index . '.jpg');
  $image_file = File::create([
    'uri' => $public_path,
    'uid' => 1,
    'status' => 1,
  ]);
  try {
    $image_file->save();
  }
  catch (EntityStorageException $e) {
    $variables = Error::decodeException($e);
    \Drupal::logger('youvo')
      ->error('An error occurred while creating stock project images. %type: @message in %function (line %line of %file).', $variables);
  }

  return $image_file;
}
