<?php

/**
 * @file
 * Provides a logbook.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\user\Entity\User;
use Drupal\user_types\Utility\Profile;

/**
 * Implements hook_theme().
 */
function logbook_theme(): array {
  return [
    'log' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for log templates.
 */
function template_preprocess_log(array &$variables): void {
  /** @var \Drupal\logbook\LogInterface $log */
  $log = $variables['elements']['#log'];
  $variables['log'] = $log;
  $variables['color'] = $log->getColor();
  $variables['show_hidden'] = \Drupal::request()->query->get('hidden');
  $variables['label'] = $log->getPattern()->label();
  $variables['hidden'] = $log->getPattern()->isHidden();

  $variables['text']['#markup'] = $log->getMarkup();

  if (str_starts_with($log->bundle(), 'feedback_')) {
    $misc = $log->getMisc();
    $variables['message']['#markup'] = Link::createFromRoute(new TranslatableMarkup('Feedback ansehen'), 'entity.feedback.canonical', ['feedback' => $misc['feedback_id']])->toString();
  }
  else {
    $variables['message'] = $log->getMessage();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * At the moment we only handle creatives. Organizations should be handled from
 * the perspective of their projects.
 *
 * @todo See issue #44.
 *
 * Logs for creatives are handled as follows:
 * - All non-detectable, non-observable and non-public logs initiated by the
 *   user are deleted.
 * - All references in other logs are anonymized by replacing the respective
 *   user ID with 0 (anonymous user).
 */
function logbook_user_delete(AccountInterface $account): void {

  if (Profile::isOrganization($account)) {
    return;
  }

  // @todo The following logic could be moved to a respective storage class.
  $uid = Profile::id($account);
  $anonymous = User::getAnonymousUser();
  try {
    $log_storage = \Drupal::entityTypeManager()
      ->getStorage('log');
    $log_pattern_storage = \Drupal::entityTypeManager()
      ->getStorage('log_pattern');
  }
  catch (InvalidPluginDefinitionException | PluginNotFoundException) {
    \Drupal::logger('logbook')
      ->error('Unable to perform logbook delete/anonymize task for user %id!', ['%id' => $uid]);
    return;
  }

  // Delete all non-detectable, non-observable and non-public logs of the
  // creative.
  $concealed_patterns = $log_pattern_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('detectable', FALSE)
    ->condition('observable', FALSE)
    ->condition('public', FALSE)
    ->execute();
  if (!empty($concealed_patterns)) {
    $log_ids = $log_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('author', $uid)
      ->condition('type', $concealed_patterns, 'IN')
      ->execute();
  }
  if (!empty($log_ids)) {
    $logs_to_delete = $log_storage->loadMultiple($log_ids);
    try {
      $log_storage->delete($logs_to_delete);
    }
    catch (EntityStorageException) {
      \Drupal::logger('logbook')
        ->error('Unable to delete logs for user %id!', ['%id' => $uid]);
    }
  }

  // Load all remaining logs associated with the creative.
  $or_group = $log_storage->getQuery()
    ->orConditionGroup()
    ->condition('author', $uid)
    ->condition('manager', $uid)
    ->condition('creatives', $uid, 'IN');
  $log_ids = $log_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition($or_group)
    ->execute();
  $logs = $log_storage->loadMultiple($log_ids);

  // Replace user reference with anonymous user reference in the respective
  // fields.
  /** @var \Drupal\logbook\LogInterface $log */
  foreach ($logs as $log) {
    if ($log->getOwnerId() == $uid) {
      $log->setOwner($anonymous);
    }
    if ($log->getManager()->id() == $uid) {
      $log->setManager($anonymous);
    }
    if (
      ($creatives = $log->getCreatives()) &&
      in_array($uid, array_map(static fn($c) => $c->id(), $creatives), TRUE)
    ) {
      $creatives = array_filter($creatives, static fn($c) => $c->id() != $uid);
      $creatives[] = $anonymous;
      $log->setCreatives($creatives);
    }
    try {
      $log->save();
    }
    catch (EntityStorageException) {
      \Drupal::logger('logbook')
        ->error('Unable to anonymize logs for user %id!', ['%id' => $uid]);
    }
  }

}
