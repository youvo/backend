<?php

/**
 * @file
 * Provides hooks to document progress in academy.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\courses\Entity\Course;
use Drupal\lectures\Entity\Lecture;
use Drupal\progress\Plugin\Field\CompletedFieldItemList;
use Drupal\progress\Plugin\Field\CurrentLectureFieldItemList;
use Drupal\progress\Plugin\Field\ProgressFieldItemList;
use Drupal\progress\Plugin\Field\UnlockedFieldItemList;
use Drupal\Core\Utility\Error;

/**
 * Implements hook_entity_base_field_info().
 */
function progress_entity_base_field_info(EntityTypeInterface $entity_type) {

  $fields = [];

  // Add the progress field to entity Course. Append this field first because
  // in edge cases it can change the progress of a creative within a course.
  // Then, this change can be caught by the calculation of the next fields.
  if ($entity_type->id() == 'course') {
    $fields['progress'] = BaseFieldDefinition::create('cacheable_integer')
      ->setLabel(t('Progress'))
      ->setDescription(t('Computes the progress status by user.'))
      ->setComputed(TRUE)
      ->setTranslatable(FALSE)
      ->setClass(ProgressFieldItemList::class);
  }

  // Add completed and unlocked base fields to entity Lecture and Course.
  if ($entity_type->id() == 'lecture' || $entity_type->id() == 'course') {
    $fields['completed'] = BaseFieldDefinition::create('cacheable_boolean')
      ->setLabel(t('Completed'))
      ->setDescription(t('Computes the completed status by user.'))
      ->setComputed(TRUE)
      ->setTranslatable(FALSE)
      ->setClass(CompletedFieldItemList::class);
    $fields['unlocked'] = BaseFieldDefinition::create('cacheable_boolean')
      ->setLabel(t('Unlocked'))
      ->setDescription(t('Computes the unlocked status by user.'))
      ->setComputed(TRUE)
      ->setTranslatable(FALSE)
      ->setClass(UnlockedFieldItemList::class);
  }

  // Add current lecture base field to entity Course. Returns the first unlocked
  // lecture of a creative depending on their progress.
  if ($entity_type->id() == 'course') {
    $fields['current_lecture'] = BaseFieldDefinition::create('cacheable_string')
      ->setLabel(t('Current Lecture'))
      ->setDescription(t('Computes the last unlocked lecture by user.'))
      ->setComputed(TRUE)
      ->setTranslatable(FALSE)
      ->setClass(CurrentLectureFieldItemList::class);
  }

  return $fields;
}

/**
 * Implements hook_entity_field_access().
 */
function progress_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, ?FieldItemListInterface $items = NULL) {

  $result = AccessResult::neutral();

  // We only allow progress, unlocked and completed fields for users with the
  // view courses permission. This excludes users with the view courses overview
  // permission.
  $progress_fields = ['progress', 'unlocked', 'completed'];
  if (in_array($field_definition->getName(), $progress_fields)) {
    if (!$account->hasPermission('view courses')) {
      $result = AccessResult::forbidden();
    }
  }

  return $result;
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Delete all relevant progress entries when lecture is deleted.
 */
function progress_lecture_delete(EntityInterface $entity) {

  if ($entity instanceof Lecture) {
    try {
      $progresses = \Drupal::entityTypeManager()->getStorage('lecture_progress')
        ->loadByProperties(['lecture' => $entity->id()]);
      foreach ($progresses as $progress) {
        $progress->delete();
      }
    }
    catch (InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException $e) {
      $variables = Error::decodeException($e);
      $variables['%id'] = $entity->id();
      \Drupal::logger('academy')
        ->error('Unable to delete submissions for lecture with ID %id.', $variables);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Delete all relevant progress entries when course is deleted.
 */
function progress_course_delete(EntityInterface $entity) {

  if ($entity instanceof Course) {
    try {
      $progresses = \Drupal::entityTypeManager()->getStorage('course_progress')
        ->loadByProperties(['course' => $entity->id()]);
      foreach ($progresses as $progress) {
        $progress->delete();
      }
    }
    catch (InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException $e) {
      $variables = Error::decodeException($e);
      $variables['%id'] = $entity->id();
      \Drupal::logger('academy')
        ->error('Unable to delete submissions for course with ID %id.', $variables);
    }
  }
}
