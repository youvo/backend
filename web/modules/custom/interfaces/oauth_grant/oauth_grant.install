<?php

/**
 * @file
 * Install, update and uninstall functions for the oauth_grant module.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\consumers\Entity\Consumer;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Utility\Error;

/**
 * Implements hook_install().
 */
function oauth_grant_install() {

  // Overwrite simple_oauth settings.
  $config = \Drupal::configFactory()->getEditable('simple_oauth.settings');
  // 1 hour, 2 minutes and 14 days.
  $config->set('access_token_expiration', 3600);
  $config->set('authorization_code_expiration', 120);
  $config->set('refresh_token_expiration', 1209600);
  $config->set('remember_clients', TRUE);
  $config->set('disable_openid_connect', TRUE);
  $config->set('use_implicit', FALSE);
  $config->set('public_key', dirname(DRUPAL_ROOT) . '/certificates/public.key');
  $config->set('private_key', dirname(DRUPAL_ROOT) . '/certificates/private.key');
  $config->save(TRUE);

  // The following settings are for development purposes. Production settings
  // should be determined manually.
  try {
    // Delete default consumer.
    $default_consumer = \Drupal::entityTypeManager()
      ->getStorage('consumer')
      ->load(1);
    $default_consumer?->delete();

    // Load development environment. Exit if not available.
    $env_path = dirname(DRUPAL_ROOT) . '/config/.env.consumers.development';
    if (!is_readable($env_path)) {
      throw new \RuntimeException(sprintf('%s file is not readable.', $env_path));
    }

    // Get local and development consumer info.
    $consumer_uuids = [];
    $consumer_redirects = [];
    $consumer_secrets = [];
    $lines = file($env_path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
      if (str_starts_with(trim($line), '#')) {
        continue;
      }
      [$name, $value] = explode('=', $line, 2);
      $name = trim($name);
      $value = trim($value);

      if (str_starts_with(trim($line), 'UUID')) {
        $consumer_uuids[$name] = $value;
      }
      elseif (str_starts_with(trim($line), 'REDIRECT')) {
        $consumer_redirects[$name] = $value;
      }
      elseif (str_starts_with(trim($line), 'SECRET')) {
        $consumer_secrets[$name] = $value;
      }
    }

    // Add new consumer for creatives (local).
    if (isset($consumer_uuids['UUID_CREATIVE_LOCAL']) &&
      isset($consumer_redirects['REDIRECT_CREATIVE_LOCAL']) &&
      isset($consumer_secrets['SECRET_CREATIVE_LOCAL'])) {
      $consumer = Consumer::create([
        'uuid' => 'dd9ace1c-8879-45ae-b137-9cc06b4b5821',
        'client_id' => $consumer_uuids['UUID_CREATIVE_LOCAL'],
        'label' => 'Creatives (local)',
        'third_party' => FALSE,
        'is_default' => FALSE,
        'owner_id' => 1,
        'confidential' => TRUE,
        'secret' => $consumer_secrets['SECRET_CREATIVE_LOCAL'],
        'roles' => [
          ['target_id' => 'creative'],
        ],
        'image_styles' => [
          ['target_id' => 'avatar'],
          ['target_id' => 'content'],
          ['target_id' => 'teaser'],
        ],
        'redirect' => $consumer_redirects['REDIRECT_CREATIVE_LOCAL'],
      ]);
      $consumer->save();
    }

    // Add new consumer for creatives.
    if (isset($consumer_uuids['UUID_CREATIVE']) &&
      isset($consumer_redirects['REDIRECT_CREATIVE']) &&
      isset($consumer_secrets['SECRET_CREATIVE'])) {
      $consumer = Consumer::create([
        'uuid' => '7f56f1d5-154f-42c1-b591-45e4e2fd235e',
        'client_id' => $consumer_uuids['UUID_CREATIVE'],
        'label' => 'Creatives',
        'third_party' => FALSE,
        'is_default' => TRUE,
        'owner_id' => 1,
        'confidential' => TRUE,
        'secret' => $consumer_secrets['SECRET_CREATIVE'],
        'roles' => [
          ['target_id' => 'creative'],
        ],
        'image_styles' => [
          ['target_id' => 'avatar'],
          ['target_id' => 'content'],
          ['target_id' => 'teaser'],
        ],
        'redirect' => $consumer_redirects['REDIRECT_CREATIVE'],
      ]);
      $consumer->save();
    }

    // Add new consumer for organizations (local).
    if (isset($consumer_uuids['UUID_ORGANIZATION_LOCAL']) &&
      isset($consumer_redirects['REDIRECT_ORGANIZATION_LOCAL']) &&
      isset($consumer_secrets['SECRET_ORGANIZATION_LOCAL'])) {
      $consumer = Consumer::create([
        'uuid' => 'ff5a1e31-557c-4c17-a7f5-a4a342d3cc19',
        'client_id' => $consumer_uuids['UUID_ORGANIZATION_LOCAL'],
        'label' => 'Organizations (local)',
        'third_party' => FALSE,
        'is_default' => TRUE,
        'owner_id' => 1,
        'confidential' => TRUE,
        'secret' => $consumer_secrets['SECRET_ORGANIZATION_LOCAL'],
        'roles' => [
          ['target_id' => 'organization'],
        ],
        'image_styles' => [
          ['target_id' => 'avatar'],
          ['target_id' => 'content'],
          ['target_id' => 'teaser'],
        ],
        'redirect' => $consumer_redirects['REDIRECT_ORGANIZATION_LOCAL'],
      ]);
      $consumer->save();
    }

    // Add new consumer for organizations.
    if (isset($consumer_uuids['UUID_ORGANIZATION']) &&
      isset($consumer_redirects['REDIRECT_ORGANIZATION']) &&
      isset($consumer_secrets['SECRET_ORGANIZATION'])) {
      $consumer = Consumer::create([
        'uuid' => '63b60b9e-dbbc-4214-a520-f8cf4cab65da',
        'client_id' => $consumer_uuids['UUID_ORGANIZATION'],
        'label' => 'Organizations',
        'third_party' => FALSE,
        'is_default' => TRUE,
        'owner_id' => 1,
        'confidential' => TRUE,
        'secret' => $consumer_secrets['SECRET_ORGANIZATION'],
        'roles' => [
          ['target_id' => 'organization'],
        ],
        'image_styles' => [
          ['target_id' => 'avatar'],
          ['target_id' => 'content'],
          ['target_id' => 'teaser'],
        ],
        'redirect' => $consumer_redirects['REDIRECT_ORGANIZATION'],
      ]);
      $consumer->save();
    }
  }
  catch (InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException | RuntimeException $e) {
    $variables = Error::decodeException($e);
    \Drupal::logger('youvo')
      ->info('Skipped consumer settings. %type: @message in %function (line %line of %file).', $variables);
  }
}
