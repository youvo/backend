<?php

/**
 * @file
 * Custom module which handles business logic for project entities.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\projects\Access\ProjectFieldAccess;
use Drupal\projects\Entity\Project;
use Drupal\projects\Plugin\Field\ComputedProjectReferenceFieldItemList;
use Drupal\projects\ProjectInterface;
use Drupal\projects\ProjectResultInterface;

/**
 * Implements hook_entity_field_access().
 */
function projects_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, ?FieldItemListInterface $items = NULL) {
  $entity = $items?->getEntity();
  if ($entity instanceof Project) {
    return ProjectFieldAccess::checkFieldAccess($entity, $operation, $field_definition, $account);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_base_field_info().
 */
function projects_entity_base_field_info(EntityTypeInterface $entity_type) {

  $fields = [];

  // Add projects base field to entity User.
  if ($entity_type->id() == 'user') {
    $fields['projects'] = BaseFieldDefinition::create('cacheable_entity_reference')
      ->setLabel(t('Computed Projects'))
      ->setSetting('target_type', 'project')
      ->setDescription(t('Computes the projects referencing this user.'))
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setComputed(TRUE)
      ->setClass(ComputedProjectReferenceFieldItemList::class);
  }

  return $fields;
}

/**
 * Implements hook_tokens().
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function projects_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  if ($type == 'project' && (!empty($data['project']) || !empty($data['project_result']))) {
    if ($data['project'] instanceof ProjectInterface) {
      $project = $data['project'];
    }
    elseif ($data['project_result'] instanceof ProjectResultInterface) {
      $project = $data['project_result']->getOriginEntity();
    }
    if (isset($project)) {
      foreach ($tokens as $name => $original) {
        $replacements[$original] = match ($name) {
          'project_id' => $project->id(),
          default => $name,
        };
      }
    }
  }

  return $replacements ?? [];
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access().
 */
function projects_jsonapi_project_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_OWN => AccessResult::allowed(),
  ]);
}

/**
 * Implements hook_theme().
 */
function projects_theme() {
  return [
    'project' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function projects_theme_suggestions_project(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'project__' . $sanitized_view_mode;
  return $suggestions;
}
