<?php

/**
 * @file
 * Install, update and uninstall functions for the oauth_grant module.
 */

use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\consumers\Entity\Consumer;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\user\Entity\Role;
use Drupal\Core\Utility\Error;

/**
 * Implements hook_install().
 */
function oauth_grant_install() {

  // Overwrite simple_oauth settings.
  $config = \Drupal::configFactory()->getEditable('simple_oauth.settings');
  // 1 hour, 2 minutes and 14 days.
  $config->set('access_token_expiration', 3600);
  $config->set('authorization_code_expiration', 120);
  $config->set('refresh_token_expiration', 1209600);
  $config->set('remember_clients', TRUE);
  $config->set('disable_openid_connect', TRUE);
  $config->set('use_implicite', FALSE);
  $config->set('public_key', dirname(DRUPAL_ROOT) . '/certificates/public.key');
  $config->set('private_key', dirname(DRUPAL_ROOT) . '/certificates/private.key');
  $config->save(TRUE);

  // The following settings are for development purposes. Production settings
  // should be determined manually.
  try {
    // Delete default consumer.
    $default_consumer = \Drupal::entityTypeManager()
      ->getStorage('consumer')
      ->load(1);
    $default_consumer->delete();

    // Load development enviroment. Exit if not available.
    $module_path = \Drupal::moduleHandler()->getModule('oauth_grant')->getPath();
    $env_path = $module_path . '/config/env/.env.development';
    if (!is_readable($env_path)) {
      throw new \RuntimeException(sprintf('%s file is not readable.', $env_path));
    }

    // Get local and development consumer info.
    $consumer_uuids = [];
    $consumer_redirects = [];
    $consumer_secrets = [];
    $lines = file($env_path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
      if (str_starts_with(trim($line), '#')) {
        continue;
      }
      list($name, $value) = explode('=', $line, 2);
      $name = trim($name);
      $value = trim($value);

      if (str_starts_with(trim($line), 'UUID')) {
        $consumer_uuids[$name] = $value;
      }
      elseif (str_starts_with(trim($line), 'REDIRECT')) {
        $consumer_redirects[$name] = $value;
      }
      elseif (str_starts_with(trim($line), 'SECRET')) {
        $consumer_secrets[$name] = $value;
      }
    }

    // Add new consumer for local.
    if (
      isset($consumer_uuids['UUID_LOCAL']) &&
      isset($consumer_redirects['REDIRECT_LOCAL']) &&
      isset($consumer_secrets['SECRET_LOCAL'])
    ) {
      $consumer = Consumer::create([
        'uuid' => $consumer_uuids['UUID_LOCAL'],
        'label' => 'Local',
        'third_party' => FALSE,
        'is_default' => TRUE,
        'owner_id' => 1,
        'confidential' => TRUE,
        'secret' => $consumer_secrets['SECRET_LOCAL'],
        'roles' => [['target_id' => 'creative']],
        'redirect' => $consumer_redirects['REDIRECT_LOCAL'],
      ]);
      $consumer->save();
    }

    // Add new consumer for development.
    if (
      isset($consumer_uuids['UUID_DEVELOPMENT']) &&
      isset($consumer_redirects['REDIRECT_DEVELOPMENT']) &&
      isset($consumer_secrets['SECRET_DEVELOPMENT'])
    ) {
      $consumer = Consumer::create([
        'uuid' => $consumer_uuids['UUID_DEVELOPMENT'],
        'label' => 'Development',
        'third_party' => FALSE,
        'is_default' => TRUE,
        'owner_id' => 1,
        'confidential' => TRUE,
        'secret' => $consumer_secrets['SECRET_DEVELOPMENT'],
        'roles' => [['target_id' => 'creative']],
        'redirect' => $consumer_redirects['REDIRECT_DEVELOPMENT'],
      ]);
      $consumer->save();
    }
  }
  catch (InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException | RuntimeException $e) {
    $variables = Error::decodeException($e);
    \Drupal::logger('youvo')
      ->info('Skipped development consumer settings. %type: @message in %function (line %line of %file).', $variables);
  }

  try {
    // Grant OAuth2 codes.
    $role_object = Role::load('creative');
    $role_object->grantPermission('grant simple_oauth codes');
    $role_object->save();
  }
  catch (EntityStorageException $e) {
    $variables = Error::decodeException($e);
    $variables['%permission'] = 'grant simple_oauth codes';
    $variables['%role'] = 'creative';
    \Drupal::logger('youvo')
      ->error('Unable to grant permission %permission to role %role. %type: @message in %function (line %line of %file).', $variables);
  }
}

/**
 * Implements hook_site_install_finished().
 *
 * @see https://www.drupal.org/project/drupal/issues/2924549
 */
function oauth_grant_site_install_finished() {

  try {
    // @todo Delete later. Or ungrant on production.
    $role_object = Role::load('authenticated');
    $role_object->grantPermission('debug simple_oauth tokens');
    $role_object->save();
    $role_object = Role::load('anonymous');
    $role_object->grantPermission('debug simple_oauth tokens');
    $role_object->save();
  }
  catch (EntityStorageException $e) {
    $variables = Error::decodeException($e);
    $variables['%permission'] = 'debug simple_oauth tokens';
    $variables['%role'] = 'creative';
    \Drupal::logger('youvo')
      ->error('Unable to grant permission %permission to role %role. %type: @message in %function (line %line of %file).', $variables);
  }
}
