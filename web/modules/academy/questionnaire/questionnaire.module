 <?php

/**
 * @file
 * Alterations for paragraph entity.
 *
 * This module does not define a new questionnaire entity. A questionnaire is a
 * paragraph entity or more explicitly a type of paragraph entity. We use the
 * following hooks to implement alterations to extend paragraphs for
 * questionnaires.
 */

use Drupal\youvo\ComputedFieldStorageDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\questionnaire\Entity\Questionnaire;
use Drupal\questionnaire\Plugin\Field\ContainedQuestionsFieldItemList;
use Drupal\questionnaire\Plugin\Field\SubmissionFieldItemList;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function questionnaire_entity_bundle_info_alter(&$bundles) {
  if (isset($bundles['paragraph']['questionnaire'])) {
    $bundles['paragraph']['questionnaire']['class'] = Questionnaire::class;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function questionnaire_entity_type_alter(array &$entity_types) {
  // We alter the default paragraph.{add,edit} form handlers in order
  // to load a different class than the standard add- and  edit form for
  // paragraphs.
  // @todo Check if there is a better way to define handlers by bundle.
  $entity_types['paragraph']->setFormClass('add', 'Drupal\\questionnaire\\Form\\ParagraphQuestionnaireForm');
  $entity_types['paragraph']->setFormClass('edit', 'Drupal\\questionnaire\\Form\\ParagraphQuestionnaireForm');
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function questionnaire_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {

  $fields = [];

  // Add computed evaluation field to evaluation paragraphs.
  if ($entity_type->id() == 'question') {
    // It is not a basefield, so we need a custom field storage definition see
    // https://www.drupal.org/project/drupal/issues/2346347#comment-12206126
    $fields['submission'] = ComputedFieldStorageDefinition::create('cacheable_string')
      ->setLabel(t('User Input'))
      ->setDescription(t('Computes the user input from question submissions.'))
      ->setComputed(TRUE)
      ->setTranslatable(FALSE)
      ->setClass(SubmissionFieldItemList::class)
      ->setTargetEntityTypeId($entity_type->id())
      ->setTargetBundle($bundle);
    if ($bundle == 'checkboxes' || $bundle == 'task') {
      $fields['submission']->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
    }
  }

  // Add computed evaluation field to evaluation paragraphs.
  if ($entity_type->id() == 'paragraph' && $bundle == 'evaluation') {
    $fields['questions'] = ComputedFieldStorageDefinition::create('entity_reference')
      ->setLabel(t('Computed Course Questions'))
      ->setDescription(t('Computes the questions contained in this course.'))
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setSetting('target_type', 'question')
      ->setComputed(TRUE)
      ->setTranslatable(FALSE)
      ->setClass(ContainedQuestionsFieldItemList::class)
      ->setTargetEntityTypeId($entity_type->id())
      ->setTargetBundle($bundle);
  }

  return $fields;
}
