<?php

/**
 * @file
 * Provides hooks for academy entities.
 */

/**
 * Add content translation alterations here.
 *
 * Need to modify the hook slightly because there are no canonical links for
 * the academy entities.
 *
 * @see content_translation.module
 */
function academy_entity_type_alter(array &$entity_types) {

  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach ($entity_types as $entity_type) {

    // Check whether child entities are implemented and used by this entity
    // type.
    $is_child_entity = FALSE;
    if (interface_exists('\Drupal\child_entities\ChildEntityInterface')) {
      $is_child_entity = $entity_type->entityClassImplements('\Drupal\child_entities\ChildEntityInterface');
    }

    // Rely on ChildEntityInterface and AcademyFormatInterface to identify
    // academy entities.
    if ($entity_type->entityClassImplements('Drupal\academy\AcademicFormatInterface') ||
      $is_child_entity) {

      if ($entity_type->isTranslatable()) {
        if (!$entity_type->hasHandlerClass('translation')) {
          $entity_type->setHandlerClass('translation', 'Drupal\academy\AcademyTranslationHandler');
        }
        if (!$entity_type->get('content_translation_metadata')) {
          $entity_type->set('content_translation_metadata', 'Drupal\content_translation\ContentTranslationMetadataWrapper');
        }
        if (!$entity_type->getFormClass('content_translation_deletion')) {
          $entity_type->setFormClass('content_translation_deletion', '\Drupal\content_translation\Form\ContentTranslationDeleteForm');
        }

        $translation = $entity_type->get('translation');
        if (!$translation || !isset($translation['content_translation'])) {
          $translation['content_translation'] = [];
        }

        // Use edit form route as base route and provide default route names
        // for the translation paths.
        if ($entity_type->hasLinkTemplate('edit-form')) {
          if (!$entity_type->hasLinkTemplate('drupal:content-translation-overview')) {
            $translations_path = $entity_type->getLinkTemplate('edit-form') . '/translations';
            $entity_type->setLinkTemplate('drupal:content-translation-overview', $translations_path);
            $entity_type->setLinkTemplate('drupal:content-translation-add', $translations_path . '/add/{source}/{target}');
            $entity_type->setLinkTemplate('drupal:content-translation-edit', $translations_path . '/edit/{language}');
            $entity_type->setLinkTemplate('drupal:content-translation-delete', $translations_path . '/delete/{language}');
          }
          // @todo https://www.drupal.org/node/2155787
          $translation['content_translation'] += [
            'access_callback' => 'content_translation_translate_access',
          ];
        }

        $entity_type->set('translation', $translation);
      }

      $entity_type->addConstraint('ContentTranslationSynchronizedFields');
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function academy_preprocess_html(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($language == 'en') {
    $variables['#attached']['library'][] = 'academy/language';
  }
}
